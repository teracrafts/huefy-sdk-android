// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.teracrafts.huefy

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.emptySet
import kotlin.text.buildString

public class HealthResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<HealthResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("status", "version", "uptime",
      "timestamp", "providers")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "status")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "version")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "uptime")

  private val nullableMapOfStringStringAdapter: JsonAdapter<Map<String, String>?> =
      moshi.adapter(Types.newParameterizedType(Map::class.java, String::class.java,
      String::class.java), emptySet(), "providers")

  public override fun toString(): String = buildString(36) {
      append("GeneratedJsonAdapter(").append("HealthResponse").append(')') }

  public override fun fromJson(reader: JsonReader): HealthResponse {
    var status: String? = null
    var version: String? = null
    var uptime: Long? = null
    var timestamp: String? = null
    var providers: Map<String, String>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> status = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("status",
            "status", reader)
        1 -> version = nullableStringAdapter.fromJson(reader)
        2 -> uptime = nullableLongAdapter.fromJson(reader)
        3 -> timestamp = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("timestamp",
            "timestamp", reader)
        4 -> providers = nullableMapOfStringStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return HealthResponse(
        status = status ?: throw Util.missingProperty("status", "status", reader),
        version = version,
        uptime = uptime,
        timestamp = timestamp ?: throw Util.missingProperty("timestamp", "timestamp", reader),
        providers = providers
    )
  }

  public override fun toJson(writer: JsonWriter, value_: HealthResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("status")
    stringAdapter.toJson(writer, value_.status)
    writer.name("version")
    nullableStringAdapter.toJson(writer, value_.version)
    writer.name("uptime")
    nullableLongAdapter.toJson(writer, value_.uptime)
    writer.name("timestamp")
    stringAdapter.toJson(writer, value_.timestamp)
    writer.name("providers")
    nullableMapOfStringStringAdapter.toJson(writer, value_.providers)
    writer.endObject()
  }
}
