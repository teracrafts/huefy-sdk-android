// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.teracrafts.huefy

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class SendEmailResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<SendEmailResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("message_id", "provider",
      "status", "timestamp")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "messageId")

  public override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("SendEmailResponse").append(')') }

  public override fun fromJson(reader: JsonReader): SendEmailResponse {
    var messageId: String? = null
    var provider: String? = null
    var status: String? = null
    var timestamp: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> messageId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("messageId",
            "message_id", reader)
        1 -> provider = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("provider",
            "provider", reader)
        2 -> status = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("status",
            "status", reader)
        3 -> timestamp = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("timestamp",
            "timestamp", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return SendEmailResponse(
        messageId = messageId ?: throw Util.missingProperty("messageId", "message_id", reader),
        provider = provider ?: throw Util.missingProperty("provider", "provider", reader),
        status = status ?: throw Util.missingProperty("status", "status", reader),
        timestamp = timestamp ?: throw Util.missingProperty("timestamp", "timestamp", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: SendEmailResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("message_id")
    stringAdapter.toJson(writer, value_.messageId)
    writer.name("provider")
    stringAdapter.toJson(writer, value_.provider)
    writer.name("status")
    stringAdapter.toJson(writer, value_.status)
    writer.name("timestamp")
    stringAdapter.toJson(writer, value_.timestamp)
    writer.endObject()
  }
}
