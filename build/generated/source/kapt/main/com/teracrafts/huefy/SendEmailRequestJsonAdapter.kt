// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.teracrafts.huefy

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class SendEmailRequestJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<SendEmailRequest>() {
  private val options: JsonReader.Options = JsonReader.Options.of("template_key", "data",
      "recipient", "provider")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "templateKey")

  private val mapOfStringAnyAdapter: JsonAdapter<Map<String, Any>> =
      moshi.adapter(Types.newParameterizedType(Map::class.java, String::class.java,
      Any::class.java), emptySet(), "data")

  private val nullableEmailProviderAdapter: JsonAdapter<EmailProvider?> =
      moshi.adapter(EmailProvider::class.java, emptySet(), "provider")

  @Volatile
  private var constructorRef: Constructor<SendEmailRequest>? = null

  public override fun toString(): String = buildString(38) {
      append("GeneratedJsonAdapter(").append("SendEmailRequest").append(')') }

  public override fun fromJson(reader: JsonReader): SendEmailRequest {
    var templateKey: String? = null
    var data_: Map<String, Any>? = null
    var recipient: String? = null
    var provider: EmailProvider? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> templateKey = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("templateKey", "template_key", reader)
        1 -> data_ = mapOfStringAnyAdapter.fromJson(reader) ?: throw Util.unexpectedNull("data_",
            "data", reader)
        2 -> recipient = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("recipient",
            "recipient", reader)
        3 -> {
          provider = nullableEmailProviderAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff7.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  SendEmailRequest(
          templateKey = templateKey ?: throw Util.missingProperty("templateKey", "template_key",
              reader),
          `data` = data_ ?: throw Util.missingProperty("data_", "data", reader),
          recipient = recipient ?: throw Util.missingProperty("recipient", "recipient", reader),
          provider = provider
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<SendEmailRequest> = this.constructorRef ?:
          SendEmailRequest::class.java.getDeclaredConstructor(String::class.java, Map::class.java,
          String::class.java, EmailProvider::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          templateKey ?: throw Util.missingProperty("templateKey", "template_key", reader),
          data_ ?: throw Util.missingProperty("data_", "data", reader),
          recipient ?: throw Util.missingProperty("recipient", "recipient", reader),
          provider,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: SendEmailRequest?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("template_key")
    stringAdapter.toJson(writer, value_.templateKey)
    writer.name("data")
    mapOfStringAnyAdapter.toJson(writer, value_.`data`)
    writer.name("recipient")
    stringAdapter.toJson(writer, value_.recipient)
    writer.name("provider")
    nullableEmailProviderAdapter.toJson(writer, value_.provider)
    writer.endObject()
  }
}
