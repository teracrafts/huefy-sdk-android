// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.teracrafts.huefy

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ValidateTemplateResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<ValidateTemplateResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("valid", "errors")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "valid")

  private val nullableListOfStringAdapter: JsonAdapter<List<String>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "errors")

  public override fun toString(): String = buildString(46) {
      append("GeneratedJsonAdapter(").append("ValidateTemplateResponse").append(')') }

  public override fun fromJson(reader: JsonReader): ValidateTemplateResponse {
    var valid: Boolean? = null
    var errors: List<String>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> valid = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("valid", "valid",
            reader)
        1 -> errors = nullableListOfStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ValidateTemplateResponse(
        valid = valid ?: throw Util.missingProperty("valid", "valid", reader),
        errors = errors
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ValidateTemplateResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("valid")
    booleanAdapter.toJson(writer, value_.valid)
    writer.name("errors")
    nullableListOfStringAdapter.toJson(writer, value_.errors)
    writer.endObject()
  }
}
